{"ast":null,"code":"import { useState } from 'react';\nimport { v4 } from 'uuid';\nconst [data, setdata] = useState([]);\nfetch('https://jsonplaceholder.typicode.com/users').then(response => response.json()).then(users => this.setdata({\n  monsters: users\n}));\nexport const UsersData = [{\n  id: v4(),\n  name: \"Leanne Graham\",\n  username: \"Bret\"\n}, {\n  id: v4(),\n  name: \"Ervin Howell\",\n  username: \"Antonette\"\n}, {\n  id: v4(),\n  name: \"Clementine Bauch\",\n  username: \"clementine\"\n}, {\n  id: v4(),\n  name: \"Patricia Lebsack\",\n  username: \"Karianne\"\n}, {\n  id: v4(),\n  name: \"Chelsey Dietrich\",\n  username: \"Kamren\"\n}, {\n  id: v4(),\n  name: \"Jake Runolfsdottir V\",\n  username: \"Leopoldo_Corkery\"\n}, {\n  id: v4(),\n  name: \"Mrs. Dennis Schulist\",\n  username: \"Karley_Dach\"\n}, {\n  id: v4(),\n  name: \"Kurtis Weissnat\",\n  username: \"Elwyn.Skiles\"\n}];","map":{"version":3,"names":["useState","v4","data","setdata","fetch","then","response","json","users","monsters","UsersData","id","name","username"],"sources":["/home/sandro/Documents/GitHub/my-app/src/fakedata.js"],"sourcesContent":["import { useState } from 'react';\nimport { v4  } from 'uuid';\n\nconst [data,setdata] = useState([])\nfetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setdata({ monsters: users }));\n  \nexport const UsersData = [\n    {\n      id: v4(),\n      name: \"Leanne Graham\",\n      username: \"Bret\",\n    },\n    {\n      id:v4(),\n      name: \"Ervin Howell\",\n      username: \"Antonette\",\n    },\n    {\n      id: v4(),\n      name: \"Clementine Bauch\",\n      username: \"clementine\",\n    },\n    {\n      id: v4(),\n      name: \"Patricia Lebsack\",\n      username: \"Karianne\",\n    },\n    {\n      id: v4(),\n      name: \"Chelsey Dietrich\",\n      username: \"Kamren\",\n    },\n    {\n      id: v4(),\n      name: \"Jake Runolfsdottir V\",\n      username: \"Leopoldo_Corkery\",\n    },\n    {\n      id: v4(),\n      name: \"Mrs. Dennis Schulist\",\n      username: \"Karley_Dach\",\n    },\n    {\n      id: v4(),\n      name: \"Kurtis Weissnat\",\n      username: \"Elwyn.Skiles\",\n    },\n  ];"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,EAAE,QAAS,MAAM;AAE1B,MAAM,CAACC,IAAI,EAACC,OAAO,CAAC,GAAGH,QAAQ,CAAC,EAAE,CAAC;AACnCI,KAAK,CAAC,4CAA4C,CAAC,CAC5CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACjCF,IAAI,CAACG,KAAK,IAAI,IAAI,CAACL,OAAO,CAAC;EAAEM,QAAQ,EAAED;AAAM,CAAC,CAAC,CAAC;AAEvD,OAAO,MAAME,SAAS,GAAG,CACrB;EACEC,EAAE,EAAEV,EAAE,EAAE;EACRW,IAAI,EAAE,eAAe;EACrBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAACV,EAAE,EAAE;EACPW,IAAI,EAAE,cAAc;EACpBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAEV,EAAE,EAAE;EACRW,IAAI,EAAE,kBAAkB;EACxBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAEV,EAAE,EAAE;EACRW,IAAI,EAAE,kBAAkB;EACxBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAEV,EAAE,EAAE;EACRW,IAAI,EAAE,kBAAkB;EACxBC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAEV,EAAE,EAAE;EACRW,IAAI,EAAE,sBAAsB;EAC5BC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAEV,EAAE,EAAE;EACRW,IAAI,EAAE,sBAAsB;EAC5BC,QAAQ,EAAE;AACZ,CAAC,EACD;EACEF,EAAE,EAAEV,EAAE,EAAE;EACRW,IAAI,EAAE,iBAAiB;EACvBC,QAAQ,EAAE;AACZ,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}